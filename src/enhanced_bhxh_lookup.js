// enhanced_bhxh_lookup.js - M·ªû R·ªòNG THU TH·∫¨P D·ªÆ LI·ªÜU BHXH
const axios = require('axios');

class EnhancedBHXHLookup {
    constructor(bearerToken) {
        this.bearerToken = bearerToken; // Token API NGSP ch√≠nh th·ª©c
        this.baseURL = 'https://api.quangbinh.gov.vn';
    }

    /**
     * API 1: Thu th·∫≠p th√¥ng tin h·ªô gia ƒë√¨nh t·ª´ m√£ BHXH
     * @param {string} maSoBhxh - M√£ s·ªë BHXH (t·ª´ ·ª©ng d·ª•ng hi·ªán t·∫°i)
     * @returns {Promise<Object>} Th√¥ng tin h·ªô gia ƒë√¨nh
     */
    async getHouseholdInfoByBHXH(maSoBhxh) {
        try {
            console.log(`[API1] ƒêang tra c·ª©u th√¥ng tin h·ªô gia ƒë√¨nh cho BHXH: ${maSoBhxh}`);
            
            const response = await axios.post(
                `${this.baseURL}/apiBHXH/getTraCuuTtHgdByMaSoBhxh`,
                { maSoBhxh: maSoBhxh },
                {
                    headers: {
                        'Authorization': `Bearer ${this.bearerToken}`,
                        'Content-Type': 'application/json'
                    }
                }
            );

            const data = response.data;
            console.log(`[API1] K·∫øt qu·∫£:`, {
                hoTen: data.hoTen,
                soSoCu: data.soSoCu,
                ngaySinh: data.ngaySinh,
                gioiTinh: this.formatGender(data.gioiTinh),
                diaDiem: `${data.maTinhKs}/${data.maHuyenKs}/${data.maXaKs}`,
                trangThai: data.trangThai
            });

            return data;
        } catch (error) {
            console.error(`[API1] L·ªói tra c·ª©u h·ªô gia ƒë√¨nh:`, error.message);
            return null;
        }
    }

    /**
     * API 2: L·∫•y m√£ BHXH theo ti√™u ch√≠ (ph∆∞∆°ng ph√°p thay th·∫ø)
     * @param {Object} criteria - Ti√™u ch√≠ t√¨m ki·∫øm
     * @returns {Promise<string>} M√£ s·ªë BHXH
     */
    async getBHXHByCriteria(criteria) {
        try {
            console.log(`[API2] ƒêang t√¨m m√£ BHXH theo ti√™u ch√≠:`, criteria);
            
            const response = await axios.post(
                `${this.baseURL}/apiBHXH/getMaSoBhxhTheoTieuChi`,
                {
                    hoTen: criteria.hoTen,
                    ngaySinh: criteria.ngaySinh,
                    loaiNgaySinh: criteria.loaiNgaySinh || "0",
                    gioiTinh: criteria.gioiTinh,
                    maTinhKs: criteria.maTinhKs,
                    maHuyenKs: criteria.maHuyenKs || "",
                    maXaKs: criteria.maXaKs || "",
                    isKs: criteria.isKs || "0" // 0: h·ªô kh·∫©u, 1: khai sinh
                },
                {
                    headers: {
                        'Authorization': `Bearer ${this.bearerToken}`,
                        'Content-Type': 'application/json'
                    }
                }
            );

            const data = response.data;
            console.log(`[API2] T√¨m ƒë∆∞·ª£c m√£ BHXH:`, data.maSoBhxh);
            
            return data.maSoBhxh;
        } catch (error) {
            console.error(`[API2] L·ªói t√¨m m√£ BHXH:`, error.message);
            return null;
        }
    }

    /**
     * API 3: Thu th·∫≠p th√¥ng tin h·ªô gia ƒë√¨nh ƒë·∫ßy ƒë·ªß (bao g·ªìm M√É H·ªò GIA ƒê√åNH)
     * @param {Object} searchData - D·ªØ li·ªáu t√¨m ki·∫øm
     * @returns {Promise<Object>} Th√¥ng tin h·ªô gia ƒë√¨nh ƒë·∫ßy ƒë·ªß
     */
    async getFullHouseholdInfo(searchData) {
        try {
            console.log(`[API3] ƒêang tra c·ª©u th√¥ng tin h·ªô gia ƒë√¨nh ƒë·∫ßy ƒë·ªß:`, searchData.hoTen);
            
            const response = await axios.post(
                `${this.baseURL}/apiBHXH/getTraCuuThongTinHgd`,
                {
                    maTinh: searchData.maTinh,
                    hoTen: searchData.hoTen,
                    ngaySinh: searchData.ngaySinh,
                    loaiNgaySinh: searchData.loaiNgaySinh || "0",
                    gioiTinh: searchData.gioiTinh,
                    soSo: searchData.soSo || "",
                    maThe: searchData.maThe || "",
                    isKs: searchData.isKs || "0"
                },
                {
                    headers: {
                        'Authorization': `Bearer ${this.bearerToken}`,
                        'Content-Type': 'application/json'
                    }
                }
            );

            const data = response.data;
            console.log(`[API3] üéØ QUAN TR·ªåNG - M√É H·ªò GIA ƒê√åNH:`, data.maHo);
            console.log(`[API3] K·∫øt qu·∫£ ƒë·∫ßy ƒë·ªß:`, {
                maSo: data.maSo,
                hoTen: data.hoTen,
                ngaySinh: data.ngaySinh,
                gioiTinh: this.formatGender(data.gioiTinh),
                maHoGiaDinh: data.maHo, // üî• QUAN TR·ªåNG!
                diaChi: data.diaChi,
                trangThai: data.trangThai
            });

            return data;
        } catch (error) {
            console.error(`[API3] L·ªói tra c·ª©u th√¥ng tin h·ªô gia ƒë√¨nh:`, error.message);
            return null;
        }
    }

    /**
     * QUY TR√åNH T√çCH H·ª¢P V·ªöI ·ª®NG D·ª§NG HI·ªÜN T·∫†I
     * @param {Object} currentResult - K·∫øt qu·∫£ t·ª´ ·ª©ng d·ª•ng hi·ªán t·∫°i (m√£ BHXH + ng√†y sinh)
     * @param {Object} originalData - D·ªØ li·ªáu g·ªëc (CCCD, t√™n, ƒë·ªãa ch·ªâ)
     * @returns {Promise<Object>} D·ªØ li·ªáu m·ªü r·ªông
     */
    async enhanceCurrentResult(currentResult, originalData) {
        console.log('\nüöÄ === B·∫ÆTƒê·∫¶U QUY TR√åNH M·ªû R·ªòNG D·ªÆ LI·ªÜU ===');
        
        const enhancedData = {
            // D·ªØ li·ªáu g·ªëc t·ª´ ·ª©ng d·ª•ng hi·ªán t·∫°i
            original: {
                cccd: originalData.cccd,
                hoTen: originalData.hoTen,
                diaChi: originalData.diaChi,
                maBHXH: currentResult.maBHXH,
                ngaySinh: currentResult.ngaySinh
            },
            // D·ªØ li·ªáu m·ªü r·ªông
            enhanced: {}
        };

        // B∆Ø·ªöC 1: L·∫•y th√¥ng tin h·ªô gia ƒë√¨nh t·ª´ m√£ BHXH
        const householdInfo = await this.getHouseholdInfoByBHXH(currentResult.maBHXH);
        if (householdInfo) {
            enhancedData.enhanced.phase1 = {
                soSoBHXHCu: householdInfo.soSoCu,
                gioiTinh: this.formatGender(householdInfo.gioiTinh),
                maTinhKaiSinh: householdInfo.maTinhKs,
                maHuyenKaiSinh: householdInfo.maHuyenKs,
                maXaKaiSinh: householdInfo.maXaKs,
                trangThai: householdInfo.trangThai
            };
        }

        // B∆Ø·ªöC 2: L·∫•y th√¥ng tin h·ªô gia ƒë√¨nh ƒë·∫ßy ƒë·ªß (bao g·ªìm m√£ h·ªô)
        const fullHouseholdInfo = await this.getFullHouseholdInfo({
            maTinh: this.extractProvinceCode(originalData.diaChi),
            hoTen: originalData.hoTen,
            ngaySinh: this.formatBirthDate(currentResult.ngaySinh),
            gioiTinh: householdInfo?.gioiTinh || "1"
        });

        if (fullHouseholdInfo) {
            enhancedData.enhanced.phase2 = {
                maHoGiaDinh: fullHouseholdInfo.maHo, // üî• QUAN TR·ªåNG NH·∫§T!
                diaChiDayDu: fullHouseholdInfo.diaChi,
                trangThaiHo: fullHouseholdInfo.trangThai
            };
        }

        // B∆Ø·ªöC 3: Ti·ªÅm nƒÉng t√¨m th√†nh vi√™n gia ƒë√¨nh (d·ª±a tr√™n m√£ h·ªô)
        if (enhancedData.enhanced.phase2?.maHoGiaDinh) {
            enhancedData.enhanced.phase3 = {
                note: "V·ªõi m√£ h·ªô gia ƒë√¨nh, c√≥ th·ªÉ t√¨m ki·∫øm c√°c th√†nh vi√™n kh√°c trong gia ƒë√¨nh",
                maHoGiaDinh: enhancedData.enhanced.phase2.maHoGiaDinh,
                potentialQueries: [
                    "T√¨m ki·∫øm BHXH c·ªßa c√°c th√†nh vi√™n c√πng m√£ h·ªô",
                    "Tra c·ª©u th√¥ng tin gia ƒë√¨nh m·ªü r·ªông",
                    "L·∫•y danh s√°ch ƒë·∫ßy ƒë·ªß th√†nh vi√™n"
                ]
            };
        }

        console.log('\n‚úÖ === HO√ÄN TH√ÄNH QUY TR√åNH M·ªû R·ªòNG ===');
        return enhancedData;
    }

    // Helper methods
    formatGender(genderCode) {
        const genders = { "1": "Nam", "2": "N·ªØ", "3": "Kh√°c" };
        return genders[genderCode] || "Kh√¥ng x√°c ƒë·ªãnh";
    }

    formatBirthDate(birthString) {
        // Chuy·ªÉn t·ª´ **/**/1973 th√†nh 19730101 (ho·∫∑c format ph√π h·ª£p)
        if (birthString.includes('**')) {
            const year = birthString.split('/').pop();
            return `${year}0101`; // Gi·∫£ ƒë·ªãnh ng√†y 1/1
        }
        return birthString;
    }

    extractProvinceCode(address) {
        // T√¨m m√£ t·ªânh t·ª´ ƒë·ªãa ch·ªâ (c·∫ßn mapping v·ªõi d·ªØ li·ªáu t·ªânh th√†nh)
        // T·∫°m th·ªùi return m√£ H·∫£i Ph√≤ng l√†m v√≠ d·ª•
        if (address.includes('H·∫£i Ph√≤ng')) return '31';
        return '01'; // Default H√† N·ªôi
    }
}

// V√ç D·ª§ S·ª¨ D·ª§NG
async function demonstrateEnhancement() {
    console.log('üîß === DEMO: M·ªû R·ªòNG D·ªÆ LI·ªÜU BHXH ===\n');

    // Gi·∫£ s·ª≠ c√≥ Bearer Token h·ª£p l·ªá (c·∫ßn ƒëƒÉng k√Ω t·ª´ NGSP)
    const bearerToken = "YOUR_NGSP_BEARER_TOKEN_HERE";
    const enhancer = new EnhancedBHXHLookup(bearerToken);

    // D·ªØ li·ªáu t·ª´ ·ª©ng d·ª•ng hi·ªán t·∫°i
    const currentResult = {
        maBHXH: "3116073353",
        ngaySinh: "**/**/1973"
    };

    const originalData = {
        cccd: "031173005014",
        hoTen: "ƒê·ªó Th·ªã Huy·ªÅn", 
        diaChi: "th√†nh ph·ªë H·∫£i Ph√≤ng"
    };

    try {
        const enhancedResult = await enhancer.enhanceCurrentResult(currentResult, originalData);
        
        console.log('\nüìä === K·∫æT QU·∫¢ CU·ªêI C√ôNG ===');
        console.log(JSON.stringify(enhancedResult, null, 2));

    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh demo:', error.message);
        console.log('\nüí° L∆ØU √ù: Demo n√†y c·∫ßn Bearer Token h·ª£p l·ªá t·ª´ h·ªá th·ªëng NGSP');
    }
}

// Export module ƒë·ªÉ s·ª≠ d·ª•ng trong ·ª©ng d·ª•ng ch√≠nh
module.exports = EnhancedBHXHLookup;

// Ch·∫°y demo n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
    demonstrateEnhancement();
}
