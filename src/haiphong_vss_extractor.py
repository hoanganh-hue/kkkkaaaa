#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
H·ªá th·ªëng tr√≠ch xu·∫•t d·ªØ li·ªáu VSS cho H·∫£i Ph√≤ng
D·ª±a tr√™n kinh nghi·ªám th√†nh c√¥ng t·ª´ thu th·∫≠p d·ªØ li·ªáu H·∫£i Ch√¢u
"""

import pandas as pd
import requests
import time
import json
import random
from datetime import datetime
import concurrent.futures
import os

class HaiPhongVSSExtractor:
    def __init__(self):
        self.proxy_config = {
            'http': 'http://beba111:tDV5tkMchYUBMD@ip.mproxy.vn:12301',
            'https': 'http://beba111:tDV5tkMchYUBMD@ip.mproxy.vn:12301'
        }
        
        self.session = requests.Session()
        self.session.proxies.update(self.proxy_config)
        
        self.vss_url = "https://dichvucong.vss.gov.vn/pub-page/ws/getCongDanInfo"
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Content-Type': 'application/json',
            'Accept': 'application/json, text/plain, */*',
            'Referer': 'https://dichvucong.vss.gov.vn/pub-page/tra-cuu-thong-tin-tham-gia-bhxh'
        }
        
        # Th·ªëng k√™
        self.stats = {
            'total_processed': 0,
            'successful': 0,
            'failed': 0,
            'no_data': 0,
            'active_bhxh': 0,
            'start_time': None
        }
        
        # L∆∞u tr·ªØ k·∫øt qu·∫£
        self.results = []
        
    def extract_single_cccd(self, cccd):
        """Tr√≠ch xu·∫•t th√¥ng tin t·ª´ 1 CCCD"""
        try:
            payload = {
                "cccd": cccd,
                "pageSize": 10,
                "pageNumber": 1
            }
            
            response = self.session.post(
                self.vss_url, 
                json=payload, 
                headers=self.headers, 
                timeout=30
            )
            
            self.stats['total_processed'] += 1
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get('status') == 'success' and data.get('data'):
                    bhxh_records = data.get('data', [])
                    
                    # L·ªçc ch·ªâ l·∫•y t√¨nh tr·∫°ng "ƒêang ƒë√≥ng"
                    active_records = [
                        record for record in bhxh_records 
                        if record.get('trangThai') == 'ƒêang ƒë√≥ng'
                    ]
                    
                    if active_records:
                        # L·∫•y th√¥ng tin t·ª´ record ƒë·∫ßu ti√™n
                        record = active_records[0]
                        
                        result = {
                            'cccd': cccd,
                            'ho_ten': record.get('hoVaTen', ''),
                            'gioi_tinh': record.get('gioiTinh', ''),
                            'ngay_sinh': record.get('ngaySinh', ''),
                            'sdt': record.get('soDienThoai', ''),
                            'dia_chi': record.get('diaChi', ''),
                            'so_bhxh': record.get('soBHXH', ''),
                            'tinh_trang_bhxh': record.get('trangThai', ''),
                            'don_vi': record.get('donVi', ''),
                            'ghi_chu': f"H·∫£i Ph√≤ng - {len(active_records)} record(s)"
                        }
                        
                        self.stats['successful'] += 1
                        self.stats['active_bhxh'] += 1
                        
                        return result
                    else:
                        self.stats['no_data'] += 1
                        return None
                        
                else:
                    self.stats['no_data'] += 1
                    return None
                    
            else:
                self.stats['failed'] += 1
                return None
                
        except Exception as e:
            self.stats['failed'] += 1
            print(f"‚ùå L·ªói x·ª≠ l√Ω {cccd}: {str(e)[:50]}...")
            return None
    
    def extract_batch(self, cccd_list, batch_name="batch"):
        """Tr√≠ch xu·∫•t m·ªôt batch CCCD"""
        
        print(f"\nüîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω {batch_name}: {len(cccd_list)} CCCD")
        self.stats['start_time'] = time.time()
        
        batch_results = []
        
        # X·ª≠ l√Ω tu·∫ßn t·ª± v·ªõi delay ƒë·ªÉ tr√°nh rate limiting
        for i, cccd in enumerate(cccd_list, 1):
            print(f"   üìç {i}/{len(cccd_list)}: {cccd}", end=" ")
            
            result = self.extract_single_cccd(cccd)
            
            if result:
                batch_results.append(result)
                self.results.append(result)
                print("‚úÖ")
            else:
                print("‚ùå")
            
            # Delay gi·ªØa c√°c request
            if i < len(cccd_list):  # Kh√¥ng delay ·ªü request cu·ªëi
                time.sleep(random.uniform(1.0, 2.0))
        
        elapsed = time.time() - self.stats['start_time']
        
        print(f"\nüìä K·∫øt qu·∫£ {batch_name}:")
        print(f"   ‚úÖ Th√†nh c√¥ng: {len(batch_results)}/{len(cccd_list)}")
        print(f"   ‚è±Ô∏è  Th·ªùi gian: {elapsed:.1f}s")
        print(f"   üìà T·ªëc ƒë·ªô: {len(cccd_list)/elapsed*60:.1f} CCCD/ph√∫t")
        
        return batch_results
    
    def save_batch_results(self, results, batch_name):
        """L∆∞u k·∫øt qu·∫£ batch"""
        if not results:
            print(f"‚ö†Ô∏è  {batch_name}: Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ l∆∞u")
            return None
            
        # Chuy·ªÉn ƒë·ªïi sang DataFrame
        df = pd.DataFrame(results)
        
        # S·∫Øp x·∫øp l·∫°i c·ªôt
        column_order = [
            'cccd', 'ho_ten', 'gioi_tinh', 'ngay_sinh', 
            'sdt', 'dia_chi', 'so_bhxh', 'tinh_trang_bhxh',
            'don_vi', 'ghi_chu'
        ]
        
        df = df.reindex(columns=column_order)
        
        # L∆∞u file
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"haiphong_{batch_name}_results_{timestamp}.xlsx"
        df.to_excel(filename, index=False)
        
        print(f"üíæ ƒê√£ l∆∞u {batch_name}: {filename}")
        return filename
    
    def generate_batch_report(self, batch_name):
        """T·∫°o b√°o c√°o cho batch"""
        if not self.stats['start_time']:
            return None
            
        elapsed = time.time() - self.stats['start_time']
        
        report = {
            'batch_info': {
                'name': batch_name,
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'processing_time': f"{elapsed:.1f} seconds"
            },
            'statistics': {
                'total_processed': self.stats['total_processed'],
                'successful_extractions': self.stats['successful'],
                'failed_requests': self.stats['failed'],
                'no_data_found': self.stats['no_data'],
                'active_bhxh_records': self.stats['active_bhxh'],
                'success_rate': f"{(self.stats['successful'] / max(self.stats['total_processed'], 1) * 100):.1f}%"
            },
            'performance': {
                'requests_per_minute': f"{(self.stats['total_processed'] / max(elapsed/60, 0.1)):.1f}",
                'avg_response_time': f"{(elapsed / max(self.stats['total_processed'], 1)):.2f}s"
            }
        }
        
        return report

def main():
    print("üöÄ H·ªÜ TH·ªêNG TR√çCH XU·∫§T VSS - H·∫¢I PH√íNG")
    print("=" * 50)
    
    # Kh·ªüi t·∫°o extractor
    extractor = HaiPhongVSSExtractor()
    
    # Test connection tr∆∞·ªõc
    print("üîó Ki·ªÉm tra k·∫øt n·ªëi VSS...")
    test_cccd = "031173005014"  # CCCD H·∫£i Ph√≤ng m·∫´u
    test_result = extractor.extract_single_cccd(test_cccd)
    
    if test_result:
        print("‚úÖ K·∫øt n·ªëi VSS th√†nh c√¥ng!")
        print(f"üìã Test result: {test_result['ho_ten']} - {test_result['tinh_trang_bhxh']}")
    else:
        print("‚ö†Ô∏è  Kh√¥ng th·ªÉ k·∫øt n·ªëi VSS ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu test")
    
    print(f"\nüìä Th·ªëng k√™ ban ƒë·∫ßu:")
    print(f"   Processed: {extractor.stats['total_processed']}")
    print(f"   Success: {extractor.stats['successful']}")
    print(f"   Failed: {extractor.stats['failed']}")
    
    return extractor

if __name__ == "__main__":
    extractor = main()
