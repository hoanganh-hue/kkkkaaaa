// test_bhxh_with_ma_so.js - Test g·ª≠i API BHXH v·ªõi m√£ BHXH thay v√¨ CCCD
const axios = require('axios');
const FormData = require('form-data');
const cheerio = require('cheerio');
const fs = require('fs');

// C·∫•u h√¨nh t·ª´ m√£ ngu·ªìn ban ƒë·∫ßu
const BHXH_API_URL = 'https://baohiemxahoi.gov.vn/UserControls/BHXH/BaoHiemYTe/HienThiHoGiaDinh/pListKoOTP.aspx';
const CAPTCHA_WEBSITE_URL = 'https://baohiemxahoi.gov.vn';
const CAPTCHA_WEBSITE_KEY = '6Lcey5QUAAAAADcB0m7xYLj8W8HHi8ur4JQrTCUY';

// ƒê·ªçc key CAPTCHA
function readCaptchaKey() {
    try {
        return fs.readFileSync('key-capcha.txt', 'utf-8').trim();
    } catch (error) {
        console.error('L·ªói ƒë·ªçc file key CAPTCHA:', error.message);
        return null;
    }
}

// Gi·∫£i CAPTCHA (copy t·ª´ m√£ ngu·ªìn g·ªëc)
async function solveRecaptcha(clientKey, websiteURL, websiteKey) {
    console.log('[INFO] ƒêang gi·∫£i reCAPTCHA...');
    let taskId;
    try {
        const createTaskResponse = await axios.post('https://api.2captcha.com/createTask', {
            clientKey: clientKey,
            task: { type: "RecaptchaV2TaskProxyless", websiteURL: websiteURL, websiteKey: websiteKey }
        });
        if (createTaskResponse.data.errorId !== 0) {
            console.error('L·ªói t·∫°o task 2Captcha:', createTaskResponse.data.errorCode || createTaskResponse.data.errorDescription);
            return null;
        }
        taskId = createTaskResponse.data.taskId;
        console.log(`[INFO] Task reCAPTCHA ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi ID: ${taskId}`);
    } catch (error) {
        console.error('L·ªói khi t·∫°o task 2Captcha:', error.message);
        return null;
    }

    // Ch·ªù gi·∫£i CAPTCHA
    for (let attempt = 0; attempt < 24; attempt++) {
        await new Promise(resolve => setTimeout(resolve, 5000));
        try {
            const progressPercent = Math.round(((attempt + 1) / 24) * 100);
            console.log(`[CAPTCHA] Ti·∫øn tr√¨nh gi·∫£i: ${progressPercent}% (L·∫ßn th·ª≠ ${attempt + 1}/24)`);

            const getResultResponse = await axios.post('https://api.2captcha.com/getTaskResult', { clientKey: clientKey, taskId: taskId });
            const { data } = getResultResponse;
            if (data.errorId !== 0) {
                console.error('L·ªói l·∫•y k·∫øt qu·∫£ 2Captcha:', data.errorCode || data.errorDescription);
                if (data.errorCode === 'ERROR_CAPTCHA_UNSOLVABLE' || data.errorCode === 'ERROR_NO_SLOT_AVAILABLE') return null;
            }
            if (data.status === 'ready') {
                console.log('[INFO] ƒê√£ gi·∫£i th√†nh c√¥ng CAPTCHA!');
                return data.solution.gRecaptchaResponse;
            }
        } catch (error) {
            console.error('L·ªói khi l·∫•y k·∫øt qu·∫£ task 2Captcha:', error.message);
        }
    }
    console.error('[CAPTCHA] Gi·∫£i reCAPTCHA th·∫•t b·∫°i ho·∫∑c h·∫øt th·ªùi gian ch·ªù.');
    return null;
}

// Test g·ª≠i API v·ªõi m√£ BHXH thay v√¨ CCCD
async function testBhxhWithMaSo() {
    console.log('üîç === KI·ªÇM TRA API BHXH V·ªöI M√É S·ªê BHXH ===\n');
    
    // ƒê·ªçc key CAPTCHA
    const captchaKey = readCaptchaKey();
    if (!captchaKey) {
        console.error('Kh√¥ng c√≥ CAPTCHA key. K·∫øt th√∫c test.');
        return;
    }

    // D·ªØ li·ªáu test
    const testData = {
        matinh: '31TTT', // H·∫£i Ph√≤ng
        tennhankhau: 'ƒê·ªó Th·ªã Huy·ªÅn',
        cmnd: '3116073353', // üî• ƒê√ÇY L√Ä THAY ƒê·ªîI: D√πng m√£ BHXH thay v√¨ CCCD
        typetext: 'CoDau'
    };

    console.log('üìã D·ªØ li·ªáu test:');
    console.log(`   - M√£ t·ªânh: ${testData.matinh}`);
    console.log(`   - T√™n: ${testData.tennhankhau}`);
    console.log(`   - CMND (TH·ª∞C T·∫æ L√Ä M√É BHXH): ${testData.cmnd} üî•`);
    console.log(`   - Type text: ${testData.typetext}\n`);

    // Gi·∫£i CAPTCHA
    console.log('‚è≥ B∆∞·ªõc 1: Gi·∫£i CAPTCHA...');
    const tokenRecaptcha = await solveRecaptcha(captchaKey, CAPTCHA_WEBSITE_URL, CAPTCHA_WEBSITE_KEY);
    
    if (!tokenRecaptcha) {
        console.error('‚ùå Kh√¥ng gi·∫£i ƒë∆∞·ª£c CAPTCHA. K·∫øt th√∫c test.');
        return;
    }

    console.log('‚úÖ CAPTCHA ƒë√£ ƒë∆∞·ª£c gi·∫£i th√†nh c√¥ng!\n');

    // G·ª≠i request t·ªõi API BHXH
    console.log('üöÄ B∆∞·ªõc 2: G·ª≠i request t·ªõi API BHXH...');
    
    const formData = new FormData();
    formData.append('matinh', testData.matinh);
    formData.append('tennhankhau', testData.tennhankhau);
    formData.append('cmnd', testData.cmnd); // M√£ BHXH thay v√¨ CCCD
    formData.append('tokenRecaptch', tokenRecaptcha);
    formData.append('typetext', testData.typetext);

    try {
        console.log(`üì§ ƒêang g·ª≠i POST request t·ªõi: ${BHXH_API_URL}`);
        console.log('üìã Form data:');
        console.log(`   - matinh: ${testData.matinh}`);
        console.log(`   - tennhankhau: ${testData.tennhankhau}`);
        console.log(`   - cmnd: ${testData.cmnd} (M√É BHXH)`);
        console.log(`   - typetext: ${testData.typetext}`);
        console.log(`   - tokenRecaptch: ${tokenRecaptcha.substring(0, 50)}...\n`);

        const response = await axios.post(BHXH_API_URL, formData, {
            headers: {
                ...formData.getHeaders(),
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
        });

        console.log(`üì• Response Status: ${response.status}`);
        console.log(`üìè Response Length: ${response.data.length} characters\n`);

        if (response.status === 200 && response.data) {
            console.log('‚úÖ ƒê√£ nh·∫≠n ƒë∆∞·ª£c response th√†nh c√¥ng! ƒêang ph√¢n t√≠ch...\n');
            
            // L∆∞u raw HTML ƒë·ªÉ debug
            fs.writeFileSync('response_with_ma_bhxh.html', response.data);
            console.log('üíæ Raw HTML ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o: response_with_ma_bhxh.html\n');

            // Ph√¢n t√≠ch HTML
            const $ = cheerio.load(response.data);
            
            // Ki·ªÉm tra s·ªë k·∫øt qu·∫£
            const resultsCountText = $('#kqtracuu').text();
            console.log(`üî¢ Text k·∫øt qu·∫£: "${resultsCountText}"`);
            
            const resultsCountMatch = resultsCountText.match(/\((\d+)\)/);
            const numberOfResults = resultsCountMatch ? parseInt(resultsCountMatch[1], 10) : 0;
            console.log(`üéØ S·ªë k·∫øt qu·∫£ t√¨m ƒë∆∞·ª£c: ${numberOfResults}\n`);

            if (numberOfResults === 0) {
                console.log('‚ùå Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o.');
                console.log('üí° C√≥ th·ªÉ m√°y ch·ªß kh√¥ng ch·∫•p nh·∫≠n m√£ BHXH trong tr∆∞·ªùng CMND\n');
                
                // T√¨m th√¥ng b√°o l·ªói n·∫øu c√≥
                const errorMessages = [];
                $('*').each(function() {
                    const text = $(this).text().trim();
                    if (text.includes('l·ªói') || text.includes('L·ªói') || text.includes('kh√¥ng') || text.includes('Kh√¥ng')) {
                        if (text.length < 200 && text.length > 10) {
                            errorMessages.push(text);
                        }
                    }
                });
                
                if (errorMessages.length > 0) {
                    console.log('‚ö†Ô∏è C√°c th√¥ng b√°o c√≥ th·ªÉ li√™n quan:');
                    errorMessages.forEach((msg, index) => {
                        console.log(`   ${index + 1}. ${msg}`);
                    });
                }
            } else {
                console.log('üéâ T√¨m ƒë∆∞·ª£c k·∫øt qu·∫£! ƒêang tr√≠ch xu·∫•t c√°c tr∆∞·ªùng d·ªØ li·ªáu...\n');
                
                // Tr√≠ch xu·∫•t t·∫•t c·∫£ c√°c d√≤ng trong b·∫£ng k·∫øt qu·∫£
                const rows = $('#contentChiTietHGD tr');
                console.log(`üìä S·ªë d√≤ng trong b·∫£ng: ${rows.length}\n`);
                
                if (rows.length > 0) {
                    console.log('üóÇÔ∏è === PH√ÇN T√çCH C·∫§U TR√öC B·∫¢NG ===');
                    
                    rows.each(function(index) {
                        const cells = $(this).find('td, th');
                        if (cells.length > 0) {
                            console.log(`üìã D√≤ng ${index + 1}:`);
                            cells.each(function(cellIndex) {
                                const cellText = $(this).text().trim();
                                console.log(`   C·ªôt ${cellIndex + 1}: "${cellText}"`);
                            });
                            console.log('');
                        }
                    });
                }
                
                // T√¨m t·∫•t c·∫£ c√°c th·∫ª c√≥ id ho·∫∑c class ƒë·∫∑c bi·ªát
                console.log('üè∑Ô∏è === C√ÅC ELEMENTS C√ì ID/CLASS ƒê·∫∂C BI·ªÜT ===');
                $('*[id], *[class]').each(function() {
                    const id = $(this).attr('id');
                    const className = $(this).attr('class');
                    const text = $(this).text().trim();
                    
                    if (text.length > 0 && text.length < 200) {
                        if (id) console.log(`üÜî ID "${id}": ${text}`);
                        if (className && !id) console.log(`üé® Class "${className}": ${text}`);
                    }
                });
            }

        } else {
            console.log('‚ùå Response kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu');
            console.log(`Status: ${response.status}`);
        }

    } catch (error) {
        console.error('üí• L·ªñI KHI G·ª¨I REQUEST:');
        console.error(`Error Type: ${error.name}`);
        console.error(`Error Message: ${error.message}`);
        
        if (error.response) {
            console.error(`HTTP Status: ${error.response.status}`);
            console.error(`Status Text: ${error.response.statusText}`);
            console.error(`Response Data Length: ${error.response.data ? error.response.data.length : 'N/A'}`);
            
            if (error.response.data) {
                fs.writeFileSync('error_response_with_ma_bhxh.html', error.response.data);
                console.error('üíæ Error response HTML ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o: error_response_with_ma_bhxh.html');
            }
        }
    }

    console.log('\nüèÅ === HO√ÄN T·∫§T TEST ===');
}

// Ch·∫°y test
if (require.main === module) {
    testBhxhWithMaSo().catch(console.error);
}

module.exports = testBhxhWithMaSo;
