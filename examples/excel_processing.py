#!/usr/bin/env python3
"""
V√≠ d·ª• x·ª≠ l√Ω file Excel - ƒê·ªçc CCCD t·ª´ Excel v√† ghi k·∫øt qu·∫£ ra Excel
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import pandas as pd
import asyncio
from datetime import datetime
from src.vss_auto_collector import VSSAutoCollector
from src.config_manager import ConfigManager

async def process_excel_file():
    """X·ª≠ l√Ω file Excel v·ªõi danh s√°ch CCCD"""
    
    # ƒê∆∞·ªùng d·∫´n file input v√† output
    input_file = "data/data-input.xlsx"
    output_file = f"data/results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    
    try:
        # ƒê·ªçc file Excel
        print(f"üìñ ƒê·ªçc file: {input_file}")
        df = pd.read_excel(input_file)
        
        # Ki·ªÉm tra c·ªôt CCCD
        if 'S·ªë CCCD' not in df.columns and 'CCCD' not in df.columns:
            print("‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt 'S·ªë CCCD' ho·∫∑c 'CCCD' trong file Excel")
            return
            
        cccd_column = 'S·ªë CCCD' if 'S·ªë CCCD' in df.columns else 'CCCD'
        cccd_list = df[cccd_column].astype(str).tolist()
        
        print(f"üìã T√¨m th·∫•y {len(cccd_list)} CCCD c·∫ßn x·ª≠ l√Ω")
        
        # Kh·ªüi t·∫°o collector
        config = ConfigManager()
        collector = VSSAutoCollector(config)
        
        results = []
        
        try:
            # X·ª≠ l√Ω t·ª´ng CCCD
            for idx, cccd in enumerate(cccd_list, 1):
                print(f"üîç [{idx}/{len(cccd_list)}] X·ª≠ l√Ω CCCD: {cccd}")
                
                try:
                    result = await collector.lookup_single_cccd(cccd)
                    
                    if result:
                        results.append({
                            'CCCD': cccd,
                            'H·ªç v√† t√™n': result.get('ho_ten', ''),
                            'M√£ BHXH': result.get('ma_bhxh', ''),
                            'Ng√†y c·∫•p': result.get('ngay_cap', ''),
                            'N∆°i c·∫•p': result.get('noi_cap', ''),
                            'Tr·∫°ng th√°i': result.get('trang_thai', ''),
                            'ƒê∆°n v·ªã l√†m vi·ªác': result.get('don_vi_lam_viec', ''),
                            'M·ª©c l∆∞∆°ng': result.get('muc_luong', ''),
                            'Timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                            'Tr·∫°ng th√°i x·ª≠ l√Ω': 'Th√†nh c√¥ng'
                        })
                        print(f"   ‚úÖ Th√†nh c√¥ng: {result.get('ho_ten', 'N/A')}")
                    else:
                        results.append({
                            'CCCD': cccd,
                            'H·ªç v√† t√™n': '',
                            'M√£ BHXH': '',
                            'Ng√†y c·∫•p': '',
                            'N∆°i c·∫•p': '',
                            'Tr·∫°ng th√°i': '',
                            'ƒê∆°n v·ªã l√†m vi·ªác': '',
                            'M·ª©c l∆∞∆°ng': '',
                            'Timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                            'Tr·∫°ng th√°i x·ª≠ l√Ω': 'Kh√¥ng t√¨m th·∫•y'
                        })
                        print(f"   ‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin")
                        
                except Exception as e:
                    results.append({
                        'CCCD': cccd,
                        'H·ªç v√† t√™n': '',
                        'M√£ BHXH': '',
                        'Ng√†y c·∫•p': '',
                        'N∆°i c·∫•p': '',
                        'Tr·∫°ng th√°i': '',
                        'ƒê∆°n v·ªã l√†m vi·ªác': '',
                        'M·ª©c l∆∞∆°ng': '',
                        'Timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                        'Tr·∫°ng th√°i x·ª≠ l√Ω': f'L·ªói: {str(e)}'
                    })
                    print(f"   üí• L·ªói: {str(e)}")
                
                # Delay gi·ªØa c√°c request
                await asyncio.sleep(2)
                
        finally:
            await collector.close()
        
        # Ghi k·∫øt qu·∫£ ra file Excel
        if results:
            results_df = pd.DataFrame(results)
            results_df.to_excel(output_file, index=False)
            print(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: {output_file}")
            
            # T√≥m t·∫Øt
            successful = len([r for r in results if r['Tr·∫°ng th√°i x·ª≠ l√Ω'] == 'Th√†nh c√¥ng'])
            not_found = len([r for r in results if r['Tr·∫°ng th√°i x·ª≠ l√Ω'] == 'Kh√¥ng t√¨m th·∫•y'])
            errors = len([r for r in results if r['Tr·∫°ng th√°i x·ª≠ l√Ω'].startswith('L·ªói')])
            
            print("\nüìä T·ªîNG K·∫æT:")
            print(f"   ‚úÖ Th√†nh c√¥ng: {successful}")
            print(f"   ‚ùå Kh√¥ng t√¨m th·∫•y: {not_found}")
            print(f"   üí• L·ªói: {errors}")
            print(f"   üìã T·ªïng c·ªông: {len(results)}")
        
    except Exception as e:
        print(f"üí• L·ªói x·ª≠ l√Ω file: {str(e)}")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="X·ª≠ l√Ω file Excel CCCD")
    parser.add_argument("--input", default="data/data-input.xlsx",
                       help="File Excel ƒë·∫ßu v√†o")
    parser.add_argument("--output", 
                       help="File Excel ƒë·∫ßu ra (t·ª± ƒë·ªông t·∫°o n·∫øu kh√¥ng ch·ªâ ƒë·ªãnh)")
    
    args = parser.parse_args()
    
    asyncio.run(process_excel_file())
