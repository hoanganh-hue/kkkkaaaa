#!/usr/bin/env python3
"""
V√≠ d·ª• s·ª≠ d·ª•ng c∆° b·∫£n - Tr√≠ch xu·∫•t d·ªØ li·ªáu VSS cho m·ªôt CCCD
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.vss_auto_collector import VSSAutoCollector
from src.config_manager import ConfigManager
import asyncio

async def basic_single_lookup():
    """Tra c·ª©u m·ªôt CCCD ƒë∆°n l·∫ª"""
    
    # Kh·ªüi t·∫°o config
    config = ConfigManager()
    
    # Kh·ªüi t·∫°o collector
    collector = VSSAutoCollector(config)
    
    # CCCD c·∫ßn tra c·ª©u (thay b·∫±ng CCCD th·ª±c t·∫ø)
    cccd = "031173005014"
    
    try:
        print(f"üîç ƒêang tra c·ª©u CCCD: {cccd}")
        
        # Th·ª±c hi·ªán tra c·ª©u
        result = await collector.lookup_single_cccd(cccd)
        
        if result:
            print("‚úÖ Tra c·ª©u th√†nh c√¥ng!")
            print(f"üìã K·∫øt qu·∫£:")
            print(f"   - H·ªç t√™n: {result.get('ho_ten', 'N/A')}")
            print(f"   - M√£ BHXH: {result.get('ma_bhxh', 'N/A')}")
            print(f"   - N∆°i c·∫•p: {result.get('noi_cap', 'N/A')}")
            print(f"   - Tr·∫°ng th√°i: {result.get('trang_thai', 'N/A')}")
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin BHXH")
            
    except Exception as e:
        print(f"üí• L·ªói: {str(e)}")
    
    finally:
        await collector.close()

async def basic_batch_lookup():
    """Tra c·ª©u batch nhi·ªÅu CCCD"""
    
    # Danh s√°ch CCCD c·∫ßn tra c·ª©u
    cccd_list = [
        "031173005014",
        "031174006025", 
        "031175007036"
    ]
    
    config = ConfigManager()
    collector = VSSAutoCollector(config)
    
    try:
        print(f"üîç ƒêang tra c·ª©u {len(cccd_list)} CCCD...")
        
        results = await collector.lookup_batch_cccd(cccd_list)
        
        print(f"‚úÖ Ho√†n th√†nh! T√¨m th·∫•y {len(results)} k·∫øt qu·∫£:")
        
        for cccd, data in results.items():
            if data:
                print(f"üìã {cccd}: {data.get('ho_ten', 'N/A')}")
            else:
                print(f"‚ùå {cccd}: Kh√¥ng t√¨m th·∫•y")
                
    except Exception as e:
        print(f"üí• L·ªói: {str(e)}")
        
    finally:
        await collector.close()

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="V√≠ d·ª• s·ª≠ d·ª•ng c∆° b·∫£n VSS")
    parser.add_argument("--mode", choices=["single", "batch"], default="single",
                       help="Ch·∫ø ƒë·ªô tra c·ª©u: single ho·∫∑c batch")
    
    args = parser.parse_args()
    
    if args.mode == "single":
        asyncio.run(basic_single_lookup())
    else:
        asyncio.run(basic_batch_lookup())
